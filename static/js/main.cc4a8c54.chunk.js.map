{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","name","this","props","isLit","className","onClick","flipCells","Component","Board","state","hasWon","board","createBoard","bind","coordinates","rowsNum","colsNum","split","map","Number","x","y","flipSelectedCell","every","row","cell","setState","i","j","push","Math","random","chanceLightOn","tableBoard","key","makeTable","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAUeA,G,6KALX,IAAIC,EAAOC,KAAKC,MAAMC,MAAQ,WAAa,aAC3C,OAAO,wBAAIC,UAAS,eAAUJ,GAAQK,QAASJ,KAAKC,MAAMI,gB,GAH3CC,cCCbC,G,wDAMJ,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,QAAQ,EACRC,MAAO,EAAKC,eAEd,EAAKN,UAAY,EAAKA,UAAUO,KAAf,gBANA,E,sDASTC,GAAc,IAAD,EACMb,KAAKC,MAA1Ba,EADe,EACfA,QAASC,EADM,EACNA,QACXL,EAAQV,KAAKQ,MAAME,MAFF,EAGRG,EAAYG,MAAM,KAAKC,IAAIC,QAHnB,mBAGhBC,EAHgB,KAGbC,EAHa,KAKrB,SAASC,EAAiBF,EAAGC,GACvBD,GAAK,GAAKA,EAAIL,GAAWM,GAAK,GAAKA,EAAIL,IACzCL,EAAMS,GAAGC,IAAMV,EAAMS,GAAGC,IAG5BC,EAAiBF,EAAGC,GACpBC,EAAiBF,EAAI,EAAGC,GACxBC,EAAiBF,EAAI,EAAGC,GACxBC,EAAiBF,EAAGC,EAAI,GACxBC,EAAiBF,EAAGC,EAAI,GAExB,IAAIX,EAASC,EAAMY,OAAM,SAACC,GAAD,OAASA,EAAID,OAAM,SAACE,GAAD,OAAWA,QACvDxB,KAAKyB,SAAS,CAAEf,MAAOA,EAAOD,OAAQA,M,oCAItC,IADA,IAAIC,EAAQ,GACHgB,EAAI,EAAGA,EAAI1B,KAAKC,MAAMa,QAASY,IAAK,CAE3C,IADA,IAAIH,EAAM,GACDI,EAAI,EAAGA,EAAI3B,KAAKC,MAAMc,QAASY,IACtCJ,EAAIK,KAAKC,KAAKC,SAAW9B,KAAKC,MAAM8B,eAEtCrB,EAAMkB,KAAKL,GAEb,OAAOb,I,kCAKP,IADA,IAAIsB,EAAa,GACRN,EAAI,EAAGA,EAAI1B,KAAKC,MAAMa,QAASY,IAAK,CAE3C,IADA,IAAIH,EAAM,GACDI,EAAI,EAAGA,EAAI3B,KAAKC,MAAMc,QAASY,IAAK,CAC3C,IAAId,EAAW,UAAMa,EAAN,YAAWC,GAC1BJ,EAAIK,KACF,kBAAC,EAAD,CACEK,IAAKpB,EACLX,MAAOF,KAAKQ,MAAME,MAAMgB,GAAGC,GAC3BtB,UAAWL,KAAKK,UAAUO,KAAKZ,KAAMa,MAI3CmB,EAAWJ,KAAK,wBAAIK,IAAKP,GAAIH,IAE/B,OAAOS,I,+BAIP,OAAOhC,KAAKQ,MAAMC,OAChB,wBAAIN,UAAU,aAAd,cAEA,6BACE,wBAAIA,UAAU,eAAd,eACA,2BAAOA,UAAU,SACf,+BAAeH,KAAKkC,mB,GAxEV5B,cAAdC,EACG4B,aAAe,CACpBrB,QAAS,EACTC,QAAS,EACTgB,cAAe,KA2EJxB,Q,MCvEA6B,MARf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,QCKckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc4a8c54.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Cell.css\";\r\n\r\nclass Cell extends Component {\r\n  render() {\r\n    let name = this.props.isLit ? \"Cell-lit\" : \"Cell-unlit\";\r\n    return <td className={`Cell ${name}`} onClick={this.props.flipCells}></td>;\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport \"./Board.css\";\r\n\r\nclass Board extends Component {\r\n  static defaultProps = {\r\n    rowsNum: 5,\r\n    colsNum: 5,\r\n    chanceLightOn: 0.25,\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasWon: false,\r\n      board: this.createBoard(),\r\n    };\r\n    this.flipCells = this.flipCells.bind(this);\r\n  }\r\n\r\n  flipCells(coordinates) {\r\n    let { rowsNum, colsNum } = this.props;\r\n    let board = this.state.board;\r\n    let [x, y] = coordinates.split(\"-\").map(Number);\r\n\r\n    function flipSelectedCell(x, y) {\r\n      if (x >= 0 && x < rowsNum && y >= 0 && y < colsNum) {\r\n        board[x][y] = !board[x][y];\r\n      }\r\n    }\r\n    flipSelectedCell(x, y);\r\n    flipSelectedCell(x - 1, y);\r\n    flipSelectedCell(x + 1, y);\r\n    flipSelectedCell(x, y - 1);\r\n    flipSelectedCell(x, y + 1);\r\n\r\n    let hasWon = board.every((row) => row.every((cell) => !cell));\r\n    this.setState({ board: board, hasWon: hasWon });\r\n  }\r\n  createBoard() {\r\n    let board = [];\r\n    for (let i = 0; i < this.props.rowsNum; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < this.props.colsNum; j++) {\r\n        row.push(Math.random() < this.props.chanceLightOn);\r\n      }\r\n      board.push(row);\r\n    }\r\n    return board;\r\n  }\r\n\r\n  makeTable() {\r\n    let tableBoard = [];\r\n    for (let i = 0; i < this.props.rowsNum; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < this.props.colsNum; j++) {\r\n        let coordinates = `${i}-${j}`;\r\n        row.push(\r\n          <Cell\r\n            key={coordinates}\r\n            isLit={this.state.board[i][j]}\r\n            flipCells={this.flipCells.bind(this, coordinates)}\r\n          />\r\n        );\r\n      }\r\n      tableBoard.push(<tr key={i}>{row}</tr>);\r\n    }\r\n    return tableBoard;\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasWon ? (\r\n      <h1 className=\"Board-win\">YOU WON !!</h1>\r\n    ) : (\r\n      <div>\r\n        <h1 className=\"Board-title\">LIGHTS OUT </h1>\r\n        <table className=\"Board\">\r\n          <tbody>{(this, this.makeTable())}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}